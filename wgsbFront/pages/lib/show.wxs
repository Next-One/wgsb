// 2018-09-15T07:14:45.000Z
var handleTime = function (datetime, dateDiff) {
    datetime += "";
    var date = datetime.substring(0, 10),
        hour = parseInt(datetime.substring(11, 13)),
        min = datetime.substring(13, 16);
    hour = hour + 8 >= 24 ? hour - 16 : hour + 8;
    switch (dateDiff) {
        case 0:
            date = '今天';
            break;
        case 1:
            date = '昨天';
            break;
        case 2:
            date = '前天';
            break;
        default:
    }
    return date + " " + hour + min;
};

var utcToBJ = function (dateStr) {
    return getDate(dateStr).toLocaleString();
};

var r = function (arr) {
    var idx = Math.floor(Math.random() * arr.length);
    return arr[idx]
};

var min5 = function (num) {
    var min = Math.floor(num / 60);
    var sec = num % 60;
    sec = sec > 9 ? sec : "0" + sec;
    return "0" + min + ":" + sec;
};

var show = function (obj, item) {
    switch (item) {
        case 'price':
            var price = obj.price * obj.discount;
            return price.toFixed(2);
        case 'date':
            if (obj) {
                var year = obj.substring(0, 4);
                var month = obj.substring(5, 7);
                var day = obj.substring(8, 10);
                return year + "." + month + "." + day;
            } else {
                return "";
            }
        case 'source-price':
            if (obj.discount == 1) {
                return "";
            } else {
                return "¥" + obj.price;
            }
        case 'discount':
            if (obj.discount == 1) {
                return false;
            } else {
                return true;
            }
        default:
            return true;
    }
};

var e = function (type, current, item) {
    switch (item) {
        case "line":
            return type == current ? 'underline' : '';
        case "select":
            return type == current ? 'active' : '';
        case "rule":
            return type == current ? 'active-sort' : '';
    }
};

var totalPrice = function (cart) {
    var item;
    var totalPrice = 0;
    for (var i = 0; i < cart.length; i++) {
        item = cart[i];
        if (item.selected) {
            totalPrice += item.price * item.discount * item.quantity;
        }
    }
    return totalPrice;
};

var totalNum = function (cart) {
    var item;
    var totalNum = 0;
    for (var i = 0; i < cart.length; i++) {
        item = cart[i];
        if (item.selected) {
            totalNum += item.quantity;
        }
    }
    return totalNum;
};

var orderQuantity = function (orderItem) {
    var totalNum = 0;
    for (var i = 0; i < orderItem.length; i++) {
        totalNum += orderItem[i].quantity;
    }
    return totalNum;
};


var f = function (goods, id, prop) {
    var item = getItem(goods, id);
    if (prop == 'total') {
        return item.discount * item.price;
    } else if (prop == 'isDiscount') {
        if (item.discount == 1) {
            return false;
        } else {
            return true;
        }
    }
    return item[prop];
};

var quantity = function (id, cart) {
    for(var i=0;i<cart.length;i++){
        if(id === cart[i].dishid){
            return cart[i].quantity;
        }
    }
    return 0;
};


var orderStatus = function (orderStatus) {
    switch (orderStatus) {
        case 0:
            return "接单/制作中";
        case 1:
            return "小哥配送中";
        case 2:
            return "待评价订单";
        case 3:
            return "订单已完成";
        case 4:
            return "退款";
        default :
            return "订单已完成";
    }
};


function getItem(goods, id) {
    for (var i = 0; i < goods.length; i++) {
        if (goods[i].id == id) {
            return goods[i];
        }
    }
    return goods[0];
}

function randomInRange(min, max) {
    return Math.floor(Math.random() * (max - min)) + min;
}

function random(min, max) {
    return Math.random() * (max - min) + min;
}


module.exports = {
    handleTime: handleTime,
    r: r,
    e: e,
    f: f,
    show: show,
    orderStatus: orderStatus,
    orderQuantity: orderQuantity,
    totalPrice: totalPrice,
    totalNum: totalNum,
    min5: min5,
    quantity: quantity,
    utcToBJ:utcToBJ
};